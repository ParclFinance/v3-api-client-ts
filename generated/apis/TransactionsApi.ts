/* tslint:disable */
/* eslint-disable */
/**
 * v3-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CloseMarginAccountPayload,
  ClosePositionPayload,
  CreateMarginAccountPayload,
  DepositMarginPayload,
  LiquidatePayload,
  ModifyPositionPayload,
  TransactionInfo,
  WithdrawMarginPayload,
} from '../models/index';
import {
    CloseMarginAccountPayloadFromJSON,
    CloseMarginAccountPayloadToJSON,
    ClosePositionPayloadFromJSON,
    ClosePositionPayloadToJSON,
    CreateMarginAccountPayloadFromJSON,
    CreateMarginAccountPayloadToJSON,
    DepositMarginPayloadFromJSON,
    DepositMarginPayloadToJSON,
    LiquidatePayloadFromJSON,
    LiquidatePayloadToJSON,
    ModifyPositionPayloadFromJSON,
    ModifyPositionPayloadToJSON,
    TransactionInfoFromJSON,
    TransactionInfoToJSON,
    WithdrawMarginPayloadFromJSON,
    WithdrawMarginPayloadToJSON,
} from '../models/index';

export interface GetCloseMarginAccountTransactionRequest {
    closeMarginAccountPayload: CloseMarginAccountPayload;
}

export interface GetClosePositionTransactionRequest {
    closePositionPayload: ClosePositionPayload;
}

export interface GetCreateMarginAccountTransactionRequest {
    createMarginAccountPayload: CreateMarginAccountPayload;
}

export interface GetDepositMarginTransactionRequest {
    depositMarginPayload: DepositMarginPayload;
}

export interface GetLiquidateTransactionRequest {
    liquidatePayload: LiquidatePayload;
}

export interface GetModifyPositionTransactionRequest {
    modifyPositionPayload: ModifyPositionPayload;
}

export interface GetWithdrawMarginTransactionRequest {
    withdrawMarginPayload: WithdrawMarginPayload;
}

/**
 * TransactionsApi - interface
 * 
 * @export
 * @interface TransactionsApiInterface
 */
export interface TransactionsApiInterface {
    /**
     * 
     * @summary Get close margin account transaction. Endpoint validates that the margin account can be closed. Priority fee percentile is optional. Returns base64 encoded transaction and required SOL in lamports.
     * @param {CloseMarginAccountPayload} closeMarginAccountPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiInterface
     */
    getCloseMarginAccountTransactionRaw(requestParameters: GetCloseMarginAccountTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionInfo>>;

    /**
     * Get close margin account transaction. Endpoint validates that the margin account can be closed. Priority fee percentile is optional. Returns base64 encoded transaction and required SOL in lamports.
     */
    getCloseMarginAccountTransaction(requestParameters: GetCloseMarginAccountTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionInfo>;

    /**
     * 
     * @summary Get close position transaction. Endpoint validates that the margin account can afford the trade and that the trade will succeed based on slippage settings. Warning: transaction may still fail due to on-chain state updating after endpoint validation. Priority fee percentile is optional. Returns base64 encoded transaction and required SOL in lamports.
     * @param {ClosePositionPayload} closePositionPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiInterface
     */
    getClosePositionTransactionRaw(requestParameters: GetClosePositionTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionInfo>>;

    /**
     * Get close position transaction. Endpoint validates that the margin account can afford the trade and that the trade will succeed based on slippage settings. Warning: transaction may still fail due to on-chain state updating after endpoint validation. Priority fee percentile is optional. Returns base64 encoded transaction and required SOL in lamports.
     */
    getClosePositionTransaction(requestParameters: GetClosePositionTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionInfo>;

    /**
     * 
     * @summary Get create margin account transaction. Endpoint validates that the new margin account is not already initialized. Priority fee percentile is optional. Returns base64 encoded transaction and required SOL in lamports.
     * @param {CreateMarginAccountPayload} createMarginAccountPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiInterface
     */
    getCreateMarginAccountTransactionRaw(requestParameters: GetCreateMarginAccountTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionInfo>>;

    /**
     * Get create margin account transaction. Endpoint validates that the new margin account is not already initialized. Priority fee percentile is optional. Returns base64 encoded transaction and required SOL in lamports.
     */
    getCreateMarginAccountTransaction(requestParameters: GetCreateMarginAccountTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionInfo>;

    /**
     * 
     * @summary Get deposit margin transaction. Endpoint validates that the user has enough margin collateral tokens in their associated token account to deposit. Priority fee percentile is optional. Returns base64 encoded transaction and required SOL in lamports.
     * @param {DepositMarginPayload} depositMarginPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiInterface
     */
    getDepositMarginTransactionRaw(requestParameters: GetDepositMarginTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionInfo>>;

    /**
     * Get deposit margin transaction. Endpoint validates that the user has enough margin collateral tokens in their associated token account to deposit. Priority fee percentile is optional. Returns base64 encoded transaction and required SOL in lamports.
     */
    getDepositMarginTransaction(requestParameters: GetDepositMarginTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionInfo>;

    /**
     * 
     * @summary Get liquidate transaction. Endpoint validates that the margin account can be liquidated. Priority fee percentile is optional. Returns base64 encoded transaction and required SOL in lamports.
     * @param {LiquidatePayload} liquidatePayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiInterface
     */
    getLiquidateTransactionRaw(requestParameters: GetLiquidateTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionInfo>>;

    /**
     * Get liquidate transaction. Endpoint validates that the margin account can be liquidated. Priority fee percentile is optional. Returns base64 encoded transaction and required SOL in lamports.
     */
    getLiquidateTransaction(requestParameters: GetLiquidateTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionInfo>;

    /**
     * 
     * @summary Get modify position transaction. Endpoint validates that the margin account can afford the trade and that the trade will succeed based on slippage settings. Warning: transaction may still fail due to on-chain state updating after endpoint validation. Priority fee percentile is optional. Returns base64 encoded transaction and required SOL in lamports.
     * @param {ModifyPositionPayload} modifyPositionPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiInterface
     */
    getModifyPositionTransactionRaw(requestParameters: GetModifyPositionTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionInfo>>;

    /**
     * Get modify position transaction. Endpoint validates that the margin account can afford the trade and that the trade will succeed based on slippage settings. Warning: transaction may still fail due to on-chain state updating after endpoint validation. Priority fee percentile is optional. Returns base64 encoded transaction and required SOL in lamports.
     */
    getModifyPositionTransaction(requestParameters: GetModifyPositionTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionInfo>;

    /**
     * 
     * @summary Get withdraw margin transaction. Endpoint validates that the requested margin collateral amount to withdraw does not exceed the margin account\'s available margin collateral to withdraw. Priority fee percentile is optional. Returns base64 encoded transaction and required SOL in lamports.
     * @param {WithdrawMarginPayload} withdrawMarginPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiInterface
     */
    getWithdrawMarginTransactionRaw(requestParameters: GetWithdrawMarginTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionInfo>>;

    /**
     * Get withdraw margin transaction. Endpoint validates that the requested margin collateral amount to withdraw does not exceed the margin account\'s available margin collateral to withdraw. Priority fee percentile is optional. Returns base64 encoded transaction and required SOL in lamports.
     */
    getWithdrawMarginTransaction(requestParameters: GetWithdrawMarginTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionInfo>;

}

/**
 * 
 */
export class TransactionsApi extends runtime.BaseAPI implements TransactionsApiInterface {

    /**
     * Get close margin account transaction. Endpoint validates that the margin account can be closed. Priority fee percentile is optional. Returns base64 encoded transaction and required SOL in lamports.
     */
    async getCloseMarginAccountTransactionRaw(requestParameters: GetCloseMarginAccountTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionInfo>> {
        if (requestParameters['closeMarginAccountPayload'] == null) {
            throw new runtime.RequiredError(
                'closeMarginAccountPayload',
                'Required parameter "closeMarginAccountPayload" was null or undefined when calling getCloseMarginAccountTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/close-margin-account-transaction`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CloseMarginAccountPayloadToJSON(requestParameters['closeMarginAccountPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionInfoFromJSON(jsonValue));
    }

    /**
     * Get close margin account transaction. Endpoint validates that the margin account can be closed. Priority fee percentile is optional. Returns base64 encoded transaction and required SOL in lamports.
     */
    async getCloseMarginAccountTransaction(requestParameters: GetCloseMarginAccountTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionInfo> {
        const response = await this.getCloseMarginAccountTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get close position transaction. Endpoint validates that the margin account can afford the trade and that the trade will succeed based on slippage settings. Warning: transaction may still fail due to on-chain state updating after endpoint validation. Priority fee percentile is optional. Returns base64 encoded transaction and required SOL in lamports.
     */
    async getClosePositionTransactionRaw(requestParameters: GetClosePositionTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionInfo>> {
        if (requestParameters['closePositionPayload'] == null) {
            throw new runtime.RequiredError(
                'closePositionPayload',
                'Required parameter "closePositionPayload" was null or undefined when calling getClosePositionTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/close-position-transaction`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ClosePositionPayloadToJSON(requestParameters['closePositionPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionInfoFromJSON(jsonValue));
    }

    /**
     * Get close position transaction. Endpoint validates that the margin account can afford the trade and that the trade will succeed based on slippage settings. Warning: transaction may still fail due to on-chain state updating after endpoint validation. Priority fee percentile is optional. Returns base64 encoded transaction and required SOL in lamports.
     */
    async getClosePositionTransaction(requestParameters: GetClosePositionTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionInfo> {
        const response = await this.getClosePositionTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get create margin account transaction. Endpoint validates that the new margin account is not already initialized. Priority fee percentile is optional. Returns base64 encoded transaction and required SOL in lamports.
     */
    async getCreateMarginAccountTransactionRaw(requestParameters: GetCreateMarginAccountTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionInfo>> {
        if (requestParameters['createMarginAccountPayload'] == null) {
            throw new runtime.RequiredError(
                'createMarginAccountPayload',
                'Required parameter "createMarginAccountPayload" was null or undefined when calling getCreateMarginAccountTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/create-margin-account-transaction`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMarginAccountPayloadToJSON(requestParameters['createMarginAccountPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionInfoFromJSON(jsonValue));
    }

    /**
     * Get create margin account transaction. Endpoint validates that the new margin account is not already initialized. Priority fee percentile is optional. Returns base64 encoded transaction and required SOL in lamports.
     */
    async getCreateMarginAccountTransaction(requestParameters: GetCreateMarginAccountTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionInfo> {
        const response = await this.getCreateMarginAccountTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get deposit margin transaction. Endpoint validates that the user has enough margin collateral tokens in their associated token account to deposit. Priority fee percentile is optional. Returns base64 encoded transaction and required SOL in lamports.
     */
    async getDepositMarginTransactionRaw(requestParameters: GetDepositMarginTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionInfo>> {
        if (requestParameters['depositMarginPayload'] == null) {
            throw new runtime.RequiredError(
                'depositMarginPayload',
                'Required parameter "depositMarginPayload" was null or undefined when calling getDepositMarginTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/deposit-margin-transaction`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DepositMarginPayloadToJSON(requestParameters['depositMarginPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionInfoFromJSON(jsonValue));
    }

    /**
     * Get deposit margin transaction. Endpoint validates that the user has enough margin collateral tokens in their associated token account to deposit. Priority fee percentile is optional. Returns base64 encoded transaction and required SOL in lamports.
     */
    async getDepositMarginTransaction(requestParameters: GetDepositMarginTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionInfo> {
        const response = await this.getDepositMarginTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get liquidate transaction. Endpoint validates that the margin account can be liquidated. Priority fee percentile is optional. Returns base64 encoded transaction and required SOL in lamports.
     */
    async getLiquidateTransactionRaw(requestParameters: GetLiquidateTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionInfo>> {
        if (requestParameters['liquidatePayload'] == null) {
            throw new runtime.RequiredError(
                'liquidatePayload',
                'Required parameter "liquidatePayload" was null or undefined when calling getLiquidateTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/liquidate-transaction`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LiquidatePayloadToJSON(requestParameters['liquidatePayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionInfoFromJSON(jsonValue));
    }

    /**
     * Get liquidate transaction. Endpoint validates that the margin account can be liquidated. Priority fee percentile is optional. Returns base64 encoded transaction and required SOL in lamports.
     */
    async getLiquidateTransaction(requestParameters: GetLiquidateTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionInfo> {
        const response = await this.getLiquidateTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get modify position transaction. Endpoint validates that the margin account can afford the trade and that the trade will succeed based on slippage settings. Warning: transaction may still fail due to on-chain state updating after endpoint validation. Priority fee percentile is optional. Returns base64 encoded transaction and required SOL in lamports.
     */
    async getModifyPositionTransactionRaw(requestParameters: GetModifyPositionTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionInfo>> {
        if (requestParameters['modifyPositionPayload'] == null) {
            throw new runtime.RequiredError(
                'modifyPositionPayload',
                'Required parameter "modifyPositionPayload" was null or undefined when calling getModifyPositionTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/modify-position-transaction`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModifyPositionPayloadToJSON(requestParameters['modifyPositionPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionInfoFromJSON(jsonValue));
    }

    /**
     * Get modify position transaction. Endpoint validates that the margin account can afford the trade and that the trade will succeed based on slippage settings. Warning: transaction may still fail due to on-chain state updating after endpoint validation. Priority fee percentile is optional. Returns base64 encoded transaction and required SOL in lamports.
     */
    async getModifyPositionTransaction(requestParameters: GetModifyPositionTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionInfo> {
        const response = await this.getModifyPositionTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get withdraw margin transaction. Endpoint validates that the requested margin collateral amount to withdraw does not exceed the margin account\'s available margin collateral to withdraw. Priority fee percentile is optional. Returns base64 encoded transaction and required SOL in lamports.
     */
    async getWithdrawMarginTransactionRaw(requestParameters: GetWithdrawMarginTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionInfo>> {
        if (requestParameters['withdrawMarginPayload'] == null) {
            throw new runtime.RequiredError(
                'withdrawMarginPayload',
                'Required parameter "withdrawMarginPayload" was null or undefined when calling getWithdrawMarginTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/withdraw-margin-transaction`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WithdrawMarginPayloadToJSON(requestParameters['withdrawMarginPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionInfoFromJSON(jsonValue));
    }

    /**
     * Get withdraw margin transaction. Endpoint validates that the requested margin collateral amount to withdraw does not exceed the margin account\'s available margin collateral to withdraw. Priority fee percentile is optional. Returns base64 encoded transaction and required SOL in lamports.
     */
    async getWithdrawMarginTransaction(requestParameters: GetWithdrawMarginTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionInfo> {
        const response = await this.getWithdrawMarginTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
